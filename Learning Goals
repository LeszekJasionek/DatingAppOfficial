Needed dependencies : 

EXTENSIONS : 

microsoft.aspnetcore.identity.entityframeworkCore
CloudinaryDotNet by Cloudinary

npm install ngx-toastr --save ( github.com/scttcper/ngx-toastr)
npm install @angular/animations
npm install bootswatch
npm install @kolkov/ngx-gallery --legacy-peer-deps
npm install ngx-spinner --save   /  ng add ngx-spinner
npm install ng2-file-upload@next --legacy-peer-deps




Section 2: Building a walking Skeleton Part One - API

Implement the basic API functionality and have an introductory understanding of:

1. Using the dotnet CLI
2. API controllers and Endpoints
3. Entity Framework
4. The API Project structure
5. Configuration and Environment variables
6. Source control

Section 3: Building a walking skeleton Part Two - ANGULAR

Complete the walking skeleton and have an introductory understanding of:

1. Using the Angular CLI
2. How to create a new Angular app
3. The Angular project files
4. The Angular bootstrap
5. Using the Angular HTTP Client Service
6. Running an Angular app over HTTPS
7. How to add packages using NPM


Section 4: Authentication basics

Implement basic authentication in our app and have an understanding of:

1. How to store passwords in the Database
2. Using inheritance in C# - DRY
3. Using the C# debugger
4. Using Data Transfer Objects (DTOs)
5. Validation
6. JSON Web Tokens (JWTs)
7. Using services in C#
8. Middleware
9. Extension methods - DRY


Section 5: CREATE LOGIN AND REGISTER

Implement the login and register functionality into the app as well as understanding:

1. Creating components using the Angular CLI
2. Using Angular Template forms
3. Using Angular services
4. Understanding Observables
5. Using Angular structural directives to conditionally display elements on a page
6. Component communication from parent to child
7. Component communication from child to parent

Section 6: Routing in Angular

Implement routing in our Angular app and have an understanding of:

1. Angular routing
2. Adding a bootstrap theme
3. Using Angular route guards
4. Using a Shared Module

Section 7 : Error Handling

Implement global error handeling in both the API and the Angular application.
Also to have an understanding of: 

1. API Middleware
2. Angular Interceptors
3. Troubleshooting exceptions

Section 8 : Extending the API

Implement further funcionality into our API and gain an understanding of:

1. Entity Framework Relationships
2. Entity Framework Conventions
3. Seeding Data into the Database
4. The repository pattern
5. Using AutoMapper

Section 9 : Extending the User Interface

Implement the components that make up the user interface in our client application and gain an understanding of:

1. Using Typescript
2. Using the async pipe
3. Using bootstrap for styling
4. Basic css tricks to enhance the look
5. Using a 3rd party photo gallery

Section 10 : Updating resources

Implement persistence when updating resources in the API and gaining an understanding of:

1. Angular Template forms
2. The CanDeactivate Route Guard
3. The @ViewChild decorator
4. Persisting changes to the aPI
5. Adding loading indicators to the client app
6. Caching data in Angular services


Section 11 : Adding photo upload functionality

Implement photo upload functionality in the application and gain an understanding of the following :

1. Photo storage options
2. Adding related entities
3. Using a 3rd party API
4. Using the Debugger (again!)
5. Updating and delating resources
6. What to return when creating resources in a REST based API

Section 12 : Reactive forms

Implement more advanced forms using Reactive Forms in angular and understandd how to :

1. User Reactive Forms
2. Use Angular Validation for inputs
3. Implement custom validators
4. Implement reusable form controls
5. Working with Date inputs

Section 13: Paging, Sorting and Filtering

Implement paging, sorting, filtering and gain an understanding of the following:

1. How to implement pagination on the API & client
2. Deffered Execution using IQueryable
3. How to implement filtering on the API & client
4. How to implement sorting on the API & client
5. Using Action Filters
6. Adding a TimeAge pipe
7. Implement caching in the client for paginated resources


Section 14: Adding the Like User feature

Implement the "like user" functionality and gain and understanding of the following: 

1. Many to many relationships
2. Configuring entities in the DbContext

Section 15: Adding the messaging feature

Implement the Messaging functionality and gain an understanding of the following: 

1. More many to many to many relationships
2. Using query params in Angular
3. Using Route resolvers in Angular

Section 16: Identity and Role Management

Refactor our code to use ASP.NET Identity and gain understaiding of the following:

1. Using .Net Identity
2. Role management 
3. Policy based authorisation
4. UserManager<T>
5. SignInManager<T>
6. RoleManager<T>

Section 17: SignalR

Implemtnt SignalR into applicationand understand how to:

1. User and set up SignalR on both the API and the client
2. Implement online presence
3. Implement live chat between users